#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <time.h>
#include <wait.h>

int main() {
    int pipe_fd[2]; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
    int secret_number, guess;
    int low, high; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
    int rounds = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    int current_round = 0; // –°—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    while (current_round < rounds) {
        // –ö–æ–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 1 (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å)
        if (fork() == 0) {
            // –î–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–ò–≥—Ä–æ–∫ 1)
            close(pipe_fd[0]); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
            srand(time(NULL) + current_round); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            secret_number = rand() % 100 + 1;

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞–Ω–∞–ª
            write(pipe_fd[1], &secret_number, sizeof(secret_number));
            printf("–ò–≥—Ä–æ–∫ 1 –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: %d\n", secret_number);
            close(pipe_fd[1]); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞–Ω–∞–ª–µ
            exit(EXIT_SUCCESS);
        }

        wait(NULL); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

        // –ö–æ–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2 (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å)
        if (fork() == 0) {
            // –í—Ç–æ—Ä–æ–π –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–ò–≥—Ä–æ–∫ 2)
            close(pipe_fd[1]); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞–Ω–∞–ª–µ

            // –ß–∏—Ç–∞–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ 1
            read(pipe_fd[0], &secret_number, sizeof(secret_number));
            printf("–ò–≥—Ä–æ–∫ 1 –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ò–≥—Ä–æ–∫ 2, –Ω–∞—á–∏–Ω–∞–π —É–≥–∞–¥—ã–≤–∞—Ç—å!\n");

            low = 1; // –°–±—Ä–æ—Å –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            high = 100; // –°–±—Ä–æ—Å –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            int attempts = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            while (1) {
                guess = low + (high - low) / 2; // –£–≥–∞–¥—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                printf("–ò–≥—Ä–æ–∫ 2 –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å: %d\n", guess);
                attempts++;

                if (guess == secret_number) {
                    printf("üéâ –ò–≥—Ä–æ–∫ 2 —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ %d –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ %d –ø–æ–ø—ã—Ç–æ–∫!\n", guess, attempts);
                    break; // –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —É–≥–∞–¥–∞–ª–∏
                } else if (guess < secret_number) {
                    printf("‚ùå –ò–≥—Ä–æ–∫ 2 —É–≥–∞–¥–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ.\n");
                    low = guess + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                } else {
                    printf("‚ùå –ò–≥—Ä–æ–∫ 2 —É–≥–∞–¥–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ.\n");
                    high = guess - 1; // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                }
                
                if (low > high) {
                    printf("üò± –ò–≥—Ä–æ–∫ 2 –Ω–µ –º–æ–∂–µ—Ç —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.\n");
                    break; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
                }
            }
            
            close(pipe_fd[0]); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            exit(EXIT_SUCCESS);
        }

        wait(NULL); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

        current_round++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤

        if (current_round >= rounds) break;

        printf("\n--- –†–∞—É–Ω–¥ %d –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Ä–æ–ª—è–º–∏. ---\n", current_round);

        pipe(pipe_fd); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞

        if (fork() == 0) {
            close(pipe_fd[0]); 
            
            srand(time(NULL) + current_round); 
            secret_number = rand() % 100 + 1;
            
            write(pipe_fd[1], &secret_number, sizeof(secret_number));
            printf("–ò–≥—Ä–æ–∫ 2 –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: %d\n", secret_number);
            
            close(pipe_fd[1]);
            exit(EXIT_SUCCESS);
        }

        wait(NULL); 

        if (fork() == 0) {
            close(pipe_fd[1]);

            read(pipe_fd[0], &secret_number, sizeof(secret_number));
            printf("–ò–≥—Ä–æ–∫ 2 –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ò–≥—Ä–æ–∫ 1, –Ω–∞—á–∏–Ω–∞–π —É–≥–∞–¥—ã–≤–∞—Ç—å!\n");

            low = 1;
            high = 100;

            int attempts = 0;
            while (1) {
                guess = low + (high - low) / 2;
                printf("–ò–≥—Ä–æ–∫ 1 –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å: %d\n", guess);
                attempts++;

                if (guess == secret_number) {
                    printf("üéâ –ò–≥—Ä–æ–∫ 1 —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ %d –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ %d –ø–æ–ø—ã—Ç–æ–∫!\n", guess, attempts);
                    break;
                } else if (guess < secret_number) {
                    printf("‚ùå –ò–≥—Ä–æ–∫ 1 —É–≥–∞–¥–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ.\n");
                    low = guess + 1;
                } else {
                    printf("‚ùå –ò–≥—Ä–æ–∫ 1 —É–≥–∞–¥–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ.\n");
                    high = guess - 1;
                }

                if (low > high) {
                    printf("üò± –ò–≥—Ä–æ–∫ 1 –Ω–µ –º–æ–∂–µ—Ç —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.\n");
                    break;
                }
            }
            
            close(pipe_fd[0]);
            exit(EXIT_SUCCESS);
        }

        wait(NULL); 
    }

    printf("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–≥—Ä–æ–∫–∏ —Å—ã–≥—Ä–∞–ª–∏ %d —Ä–∞—É–Ω–¥–æ–≤.\n", rounds);

    return EXIT_SUCCESS;
}
